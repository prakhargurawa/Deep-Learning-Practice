# -*- coding: utf-8 -*-
"""
Created on Sun Sep 27 10:31:17 2020

@author: prakh
"""

#The pictures are numbered 0-12499 for both cats and dogs, thus we have 12,500 images of Dogs and 12,500 images of Cats. 

import matplotlib.pyplot as plt
import cv2


cat4 = cv2.imread('D://Computer-Vision-with-Python/DATA/CATS_DOGS/train/CAT/4.jpg')
cat4 = cv2.cvtColor(cat4,cv2.COLOR_BGR2RGB)
type(cat4)
cat4.shape
plt.imshow(cat4)

dog22=cv2.imread('D://Computer-Vision-with-Python/DATA/CATS_DOGS/train/DOG/22.jpg')
dog22= cv2.cvtColor(dog22,cv2.COLOR_BGR2RGB)
type(dog22)
dog22.shape
plt.imshow(dog22)


#Its usually a good idea to manipulate the images with rotation, resizing, and scaling so the model becomes
#more robust to different images that our data set doesn't have.
#We can use the ImageDataGenerator to do this automatically for us.

from tensorflow.keras.preprocessing.image import ImageDataGenerator

image_gen = ImageDataGenerator(rotation_range=30, # rotate the image 30 degrees
                               width_shift_range=0.1, # Shift the pic width by a max of 10%
                               height_shift_range=0.1, # Shift the pic height by a max of 10%
                               rescale=1/255, # Rescale the image by normalzing it.
                               shear_range=0.2, # Shear means cutting away part of the image (max 20%)
                               zoom_range=0.2, # Zoom in by 20% max
                               horizontal_flip=True, # Allo horizontal flipping
                               fill_mode='nearest' # Fill in missing pixels with the nearest filled value
                              )

plt.imshow(image_gen.random_transform(dog22))

#The below command can understand there are only 2 classes as there are only 2 folder
image_gen.flow_from_directory('D://Computer-Vision-with-Python/DATA/CATS_DOGS/train')
image_gen.flow_from_directory('D://Computer-Vision-with-Python/DATA/CATS_DOGS/test')

# width,height,channels
image_shape = (150,150,3)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dropout, Flatten, Dense, Conv2D, MaxPooling2D

model = Sequential()

model.add(Conv2D(filters=32, kernel_size=(3,3),input_shape=(150,150,3), activation='relu',))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(filters=64, kernel_size=(3,3),input_shape=(150,150,3), activation='relu',))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(filters=64, kernel_size=(3,3),input_shape=(150,150,3), activation='relu',))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(128))
model.add(Activation('relu'))

# Dropouts help reduce overfitting by randomly turning neurons off during training.
# Here we say randomly turn off 50% of neurons.
model.add(Dropout(0.5))

# Last layer, remember its binary, 0=cat , 1=dog
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model.summary()


batch_size = 16

train_image_gen = image_gen.flow_from_directory('D://Computer-Vision-with-Python/DATA/CATS_DOGS/train',
                                               target_size=image_shape[:2],
                                               batch_size=batch_size,
                                               class_mode='binary')

test_image_gen = image_gen.flow_from_directory('D://Computer-Vision-with-Python/DATA/CATS_DOGS/test',
                                               target_size=image_shape[:2],
                                               batch_size=batch_size,
                                               class_mode='binary')

train_image_gen.class_indices

import warnings
warnings.filterwarnings('ignore')

results = model.fit_generator(train_image_gen,epochs=100,
                              steps_per_epoch=150,
                              validation_data=test_image_gen,
                             validation_steps=12)

results.history['acc']
plt.plot(results.history['acc'])
train_image_gen.class_indices


import numpy as np
from keras.preprocessing import image

dog_file = 'D://Computer-Vision-with-Python/DATA/CATS_DOGS/train/Dog/2.jpg'

dog_img = image.load_img(dog_file, target_size=(150, 150))
dog_img = image.img_to_array(dog_img)
dog_img = np.expand_dims(dog_img, axis=0)
dog_img = dog_img/255
prediction_prob = model.predict(dog_img)

print(f'Probability that image is a dog is: {prediction_prob} ')
